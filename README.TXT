------------------------------------------------------------------------
This is the project README file. Here, you should describe your project.
Tell the reader (someone who does not know anything about this project)
all he/she needs to know. The comments should usually include at least:
------------------------------------------------------------------------

PROJECT TITLE:
PURPOSE OF PROJECT:
VERSION or DATE:
HOW TO START THIS PROJECT:
AUTHORS:
USER INSTRUCTIONS:

PROJECT TITLE: Fibonacci
AUTHOR: Gerald Huang

<+s> I figured out how to use recursion well in order to calculate 
specific terms of the Fibonacci sequence. As well, I figured out 
that I needed a while statement with in.hasNextInt() in order to 
implement a stopping point for my program.

<-s> I initially used "q" in order to stop my program, but couldn't
figure out how to implement that. As well, I initially wondered why I 
couldn't calculate the 100th term of the Fibonacci sequence, until I 
realized that calculating that term required a lot more processing power.

In the future: I will use recursion when I need to implement piecewise
or recursively defined functions.

PROJECT TITLE: GameTerrainTester
AUTHOR: Gerald Huang

<+s> I practiced more with extending a class so that I don't have to 
rewrite the code. As well, I made my life easier by using the super() 
command and reusing public methods like the getTerrainSize() method.

<-s> I initially didn't recognize that I needed to create a different
object for each terrain. Luckily, I realized that was the only way that my
code would work.

In the future: I will extend classes in order to code more quickly.

PROJECT TITLE: Circle2Tester
AUTHOR: Gerald Huang

<+s> I got some more practice with ArrayLists and figured out how to use 
polymorphism to make my coding life easier. As well, I refreshed my
knowledge on static methods.

<-s> I initially did not remember how to implement ArrayLists. As well,
I did not implement a for-each loop until I realized that the while loop
would have been inefficient.

In the future: I will use polymorphism to reduce my workload while coding.
Polymorphism will allow me to reuse my old projects and methods more 
efficiently.

PROJECT TITLE: ShapesTester4
AUTHOR: Gerald Huang

<+s> I realized how inheritance can reduce my workload. Instead of coding
each class separately, I started with the base case of a rectangle and then 
moved onto higher dimensional shapes like the box and cube. 

<-s> I did not realize how to override overloaded methods through casting.
However, after looking through the module again and realizing that I needed
to cast the objects, I was able to complete the code.

In the future: I will continue using inheritance and sub/super classes to 
make my coding life easier.

PROJECT TITLE: MagpieRunner4
AUTHOR: Gerald Huang

<+s> I learned how to modify methods that searched for keywords. As well,
I used an array to make my life easier when using random responses.

<-s> I struggled initially with the concept of the search function. However,
after looking at the code, I learned how to do it by modifying the method
as well as its substrings.

In the future: I will use arrays in order to store responses when coding a 
chatbot.

PROJECT TITLE: CaesarTester
AUTHOR: Gerald Huang

<+s> I used static methods more and saw their utility. As well, I implemented
"while" loops to stop if the letter "q" was entered.

<-s> It took me some time to figure out how to properly design my program. I 
had to figure out with help that I needed a "while" loop around the entire program 
to keep looping it.

In the future: I will use static methods to help me in object-oriented 
programming in the future.

PROJECT TITLE: WaterBottleV8 and DartsV1
Authors: Gerald Huang

<+s> I implemented the "this" keyword quickly so that even though the instance and
private variables shared the same name, Java was still able to set the private
variables correctly.

<-s> However, I was initially confused about whether or not to implement a private
variable as "this.var". I eventually realized that I could set the private variable as
"var", but I had to reference the variable by using "this.var" throughout the code.

In the future: I will use the "this" keyword to differentiate between private 
and instance variables.

PROJECT TITLE: RSA
Authors: Gerald Huang

<+s> I figured out how to use loops and multiple variables (as well as a boolean 
array) to figure out if some numbers are prime. As well, I used the trick that 
we only have to check divisors up to the square root of the number to see if it's prime
(e.g. I only have to check the divisors of 100 up to 10)

<-s> It took me some time to come up with the method of finding the primes (the loops
were quite tricky). As well, I ran into some trouble as my program was displaying every 
number between the two bounds as prime. I figured out that I needed to reset my divisor to 
2 every time the loop terminated.

In the future: I will use the "this" keywords when defining variables as well as utilize
loops often in my work.

PROJECT TITLE: FrequencyAnalysis
Authors: Gerald Huang

<+s> I used a while loop in order to cycle through all of the words in the text files. As
well, I used private variables to store important information, like the number of times
each letter occurs.

<-s> It took me a little bit to figure out how to implement the methods to count the chars
in each word. But, I used my Caesar shift programs to help me with designing those methods.

In the future: I will use methods and private variables to enhance my code.

PROJECT TITLES: PictureExplorer and IntArrayWorker
Author: Gerald Huang

<+s> I was able to modify the code easily to use a new picture for PictureExplorer. As well,
I was able to understand and modify the code for IntArrayWorker to calculate a few 
statistics about a 2-D matrix.

<-s> It took me a little while to understand how to use two loops in order to cycle through 
all of the possible locations in a matrix. Luckily, I reasoned my way through it.

In the future: I will use my understanding of pixels as well as 2-D arrays in programming.

PROJECT TITLES: Homework, APComputerScience, APCalculusBC, IBTheoryOfKnowledge, IBEnglishIV, 
HomeworkTester
Authors: Gerald Huang

<+s> I was able to understand how useful abstract classes are, especially with creating a
general outline of what child classes will be. As well, I instantiated a new instance of 
each class pretty easily.

<-s> I ran into some trouble with an error saying that I could not override an abstract method
in the abstract class Homework. I corrected this error by making the createAssn() method the 
same for each class (i.e. I said that the method took two inputs in the abstract class and kept
that same method throughout the child classes).

In the future: I will use abstract classes to quickly recycle code.

PROJECT TITLES: Homework3, APComputerScience3, APCalculusBC3, IBTheoryOfKnowledge3, IBEnglishIV3, 
HomeworkTester3
Authors: Gerald Huang

<+s> I was able to implement an interface class (Processing) quickly and saw its utility in creating
a more general type of class from which I could create more specific classes and methods in. 

<-s> At first I wasn't sure how implement an interface class, but then I realized that the interface
class really only named the method and what parameter(s) it took. I then made the Processing class.

In the future: I will use interface classes to be able to reuse code more efficiently.

PROJECT TITLES: Homework4, APComputerScience4, APCalculusBC4, IBTheoryOfKnowledge4, IBEnglishIV4, 
HomeworkTester4
Authors: Gerald Huang

<+s> It was interesting to figure out how to cycle through all of the comparisons. I ended up using
two for loops and another counter in order to start each comparison at a different spot (i.e. the first 
time the inside loop starts at 1, the second at 2, etc.)

<-s> I feel like I could have coded this project more efficiently, but I'm not sure how to code it 
better. As well, it took me some time to modify the code for my project.

In the future: I will use comparable T interfaces in order to gain a better understanding of Java.

PROJECT TITLE: Inventory
AUTHORS: Gerald Huang

<+s> I was able to get a good grasp of how to use Comparable<T> interfaces as well as interface classes
and abstract classes. As well, I used a static method which turned out to be good practice from 
semester 1.

<-s> At first I was confused why Java wasn't letting me override the Comparable<T> interface in my 
Mowers class. Then I realized that I wrote Comparable<Product> when I should have wrote 
Comparable<Mowers>. That tripped me up for a while but I will definitely remember that in the future.

In the future: I will use Comparable<T> interfaces in order to compare things more conveniently.

PROJECT TITLE: Picture and PictureTester
Authors: Gerald Huang

<+s> I was able to understand how to use two for loops in order to cycle through a 2D array (in this case
an arrangement of pixels). As well, I understood how to use 2D arrays in the real world (such as in editing
photos).

<-s> Initially I wasn't sure how each method worked. But after looking at the methods and reasoning through 
each one, I realized that the methods modified each pixel one by one. I wonder if there is an easier way to 
do it by modifying similarly colored groups of pixels together...

In the future: I will use 2D arrays in order to effectively store and modify my data.

PROJECT TITLE: Candidate
Authors: Gerald Huang

<+s> It was relatively easy to switch between using an array and an ArrayList. I only had to change a few commands
between the two classes. As well, I remembered to declare an ArrayList as a List first.

<-s> It took me a few tries to use the printf command correctly. However, after I figured it out, I was able to 
neatly format my output.

In the future: I will use ArrayLists and arrays in my work, as well as the printf command.

PROJECT TITLE: Candidate, CandidateTesterV7, CandidateTesterV8
Author: Gerald Huang

<+s> I managed to figure out that I needed to use a backwards-counting for loop (using subtractions) in order to 
add in new candidates using an array. As well, I realized that using an ArrayList is much more convenient than 
using an array.

<-s> I struggled a little bit with how to phrase each method. At first, I had each insertion method return a larger
array. However, I eventually figured out that I could "push" the last element of the array out as there really isn't
a method to increase an array's size short of replacing it.

In the future: I will utilize arrays and ArrayLists when each is appropriate.

PROJECT TITLE: Student, StudentTester
Author: Gerald Huang

<+s> I learned more about how to modify ArrayLists and use loops to effectively do that. As well, I became more familiar
with OOP and static methods. As well, I became more familar with printf().

<-s> I had some trouble with NullPointer exceptions at first (for example, using get(5) when the ArrayList only went 
from 0 to 4). But I figured those out quickly.

In the future: I will use ArrayLists rather than arrays due to the ArrayList's flexibility. 

PROJECT TITLE: Picture, PictureTester
Authors: Gerald Huang

<+s> I quickly figured out how useful edge detection is in image processing. As well, I managed to complete 
edgeDetection2() in a short period of time and ended up with a picture that is more heavily-shaded than that provided by
edgeDetection().

<-s> I struggled initially with creating a collage and the other copy() method. However, I was able to reason through
the methods and eventually come up with a functioning method.

In the future: I will use the skills learned in this lab for image processing in the future.

PROJECT TITLE: Movie, MovieTester
Author: Gerald Huang

<+s> I was able to create an array easily and store Movie objects in there. As well, I followed the logical flow
of the insertion sort as they sorted through my movies. 

<-s> I struggled initially at creating an insertion sort algorithm. By looking at eimacs I obtained a better
understanding of the insertion sort. 

In the future: I will use sorting in the future to make data easier to find (though I will likely use a more efficient
method than the insertion sort).

PROJECT TITLE: Movie, MovieTesterV3
Author: Gerald Huang

<+s> I used the selection sort well by repeatedly looping through the array to find the largest value there. As well,
I managed to swap elements around effectively.

<-s> I struggled initially with coming up with my own algorithm for the selection sort. In the end, eimacs was a huge
help in getting my selection sort running. 

PROJECT TITLE: Movie, MovieTesterV4
Authors: Gerald Huang

<+s> I realized how the merge sort was faster than the selection and insertion sorts. Instead of repeatedly searching the 
array for the largest or smallest value, it just keeps partitioning the array and sorting each individual sub-array
as they are merged together.

<-s> It took me some time to understand how the merge sort algorithm worked. Even now, I'm having some trouble while looking
at the code. I will definitely try to master this type of sort (and maybe another algorithm for it) in the future.

In the future: I will use the merge sort in order to cut down on the computation time that my sorting method would need.

PROJECT TITLE: Store, StoreTester
Author: Gerald Huang

<+s> I managed to implement the different sorting algorithms in my project efficiently. As well, I understood better how the code
translated into each step of sorting it.

<-s> It still felt a little weird using the different types of sorting algorithms, but I am becoming more comfortable with using them.

In the future: I will use these sorting algorithms to organize arrays.

PROJECT TITLE: Card, CardTester, Deck, DeckTester
Author: Gerald Huang

<+s> In this lab I saw how I could use for loops in order to initialize an array in the Deck class. As well, I saw how I could use Java
to make a simple program about cards.

<-s> I was slightly confused about the size variable, and why I couldn't just use the length() method. I realized that the deal() method
relied upon the fact that the size variable and the actual size of the array were different.

In the future: I will use arrays and separate variables when convenient for my projects

PROJECT TITLE: Music, MusicTester
Authors: Gerald Huang

<+s> In this project I managed to implement a sequential search method relatively quickly. As well, I reused the same basic algorithm for the 
title, year, and artist so I remained coding efficiently.

<-s> In the project I still had a few struggles with printf() but those were quickly corrected. I didn't have many troubles in this project.

In the future: I will use search methods (maybe not sequential as it is somewhat inefficient) for arrays and other data structures.

PROJECT TITLE: MusicTesterV3
Author: Gerald Huang

<+s> I became more familiar with the binary search method. It looks simpler and more efficient than the sequential search (just by looking
at the code), but is dependent on the items being sorted first. I think that for small arrays the sequential search would be better.

<-s> I needed some time to familiarize myself with the binary search algorithm, as it was much more complex to program than the sequential search 
algorithm.

In the future: I will use binary search for large arrays, and sequential search for small ones.

PROJECT TITLE: Contacts, ContactsTester
Authors: Gerald Huang

<+s> I am more familiar with how the binary search code works (the sequential search is more straightforward). I think that I will stick with 
sequential search for small arrays (as it's easier to understand and code). But for larger arrays I will definitely use the binary search 
(even though it requires me to implement both a sorting and a searching method).

<-s> I was stuck on my code until I realized that my sorting algorithm actually returned an array. I had been wondering why my code wasn't working.
As well, the binary search is still somewhat foreign to me.

In the future: I will use searching and sorting algorithms while working with data.

PROJECT TITLE: Shuffler, Deck, DeckTester
Authors: Gerald Huang

<+s> I became more used to swapping elements of arrays. The Shuffler class and the shuffle() method helped me familiarize myself with the
algorithms. As well, it was interesting to see how the perfect shuffle's methodical technique eventually cycled everything back to normal
(given enough perfect shuffles).

<-s> I was somewhat confused by how the perfect shuffle algorithm worked. I eventually figured it out, however. I wonder if there were other 
ways of implementing the method (I tried to do it another way but it didn't work).

In the future: I will be able to manipulate arrays and ArrayLists far more easily.

PROJECT TITLE: Gradebook, GradebookTester
Author: Gerald Huang

<+s> I became more familar with exceptions and how to throw them. I will continue to use them in order to enhance my code's ease of understanding

<-s> I was initially confused about how to program the exceptions; however, after looking at example code in the module I was able to do it.

In the future: I will use exception to enhance troubleshooting

PROJECT TITLE: Elevens
Author: Gerald Huang

<+s> I figured out how card games work. As well, I became more familiar in using ArrayLists as well as implementing abstract methods in subclasses.

<-s> I still need to concentrate more on learning the vocabulary. As well, I could have traced the route through my programs more efficiently. This
lab definitely could have taken me less time than I spent on it.

In the future: I will analyze when abstract classes and interfaces are effective, and choose to use each when convenient.